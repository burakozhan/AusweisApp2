/*!
 * \brief Tests the Terms of Usage of CertificateDescription
 *
 * \copyright Copyright (c) 2014-2018 Governikus GmbH & Co. KG, Germany
 */

#include "asn1/CertificateDescription.h"

#include "TestFileHelper.h"

#include <QtTest>

using namespace governikus;

class test_TermsOfUsage
	: public QObject
{
	Q_OBJECT

	private Q_SLOTS:
		void testPurposeOf_2014_07_03_cvcDescription_data()
		{
			QTest::addColumn<QString>("purpose");

			QTest::newRow("0") << QStringLiteral("- Anmeldung und Registrierung im Portal der Bundesagentur f\u00FCr Arbeit (BA) f\u00FCr Gesch\u00E4ftsvorf\u00E4lle, die im Portal der BA verf\u00FCgbar sind -");
			QTest::newRow("1") << QStringLiteral("- Authentisierung der Studierenden beim Login an Hochschuldiensten -");
			QTest::newRow("2") << QStringLiteral("Registrierung / Login f\u00FCr \"Meine TK\"");
			QTest::newRow("3") << QStringLiteral("Permanentes B\u00FCrgerkonto");
			QTest::newRow("4") << QStringLiteral("- Selbstauskunft -");
			QTest::newRow("5") << QStringLiteral("- Registrierung und Login f\u00FCr ein Benutzerkonto im HamburgService -");
			QTest::newRow("6") << QStringLiteral("- Altersverifikation f\u00FCr Online-Shop- und eCommerce-Anbieter per Web-Schnittstelle -");
			QTest::newRow("7") << QStringLiteral("- Abwicklung von Verwaltungsleistungen mit Identifikationsbedarf ohne Registrierung -");
			QTest::newRow("8") << QStringLiteral("Abwicklung von Verwaltungsleistungen ohne Registrierung");
			QTest::newRow("9") << QStringLiteral("- Tempor\u00E4res B\u00FCrgerkonto -");
			QTest::newRow("10") << QStringLiteral("- Tempor\u00E4res B\u00FCrgerkonto -");
			QTest::newRow("11") << QStringLiteral("- Online Bearbeitung f\u00FCr Antr\u00E4ge nach dem SGB IX -");
			QTest::newRow("12") << QStringLiteral("- Tempor\u00E4res B\u00FCrgerkonto -");
			QTest::newRow("13") << QStringLiteral("BONIGO");
			QTest::newRow("14") << QStringLiteral("Registrierung / Login f\u00FCr \"meinCosmosDirekt\"");
			QTest::newRow("15") << QStringLiteral("- Selbstauskunft -");
			QTest::newRow("16") << QStringLiteral("- Login B\u00FCrgerkonto \"Mein Hagen\" -");
			QTest::newRow("17") << QStringLiteral("- Verifikation von Personendaten zur Alters- und Identit\u00E4tsfeststellung -");
			QTest::newRow("18") << QStringLiteral("- Registrierung f\u00FCr die Virtuelle Poststelle bei der Deutschen Emissionshandelsstelle -");
		}


		void testPurposeOf_2014_07_03_cvcDescription()
		{
			QFETCH(QString, purpose);

			const auto& filename = QStringLiteral(":/core/step/2014_07_03_cvcDescription%1.bin").arg(QString::fromLatin1(QTest::currentDataTag()));
			QSharedPointer<const CertificateDescription> certDescr = CertificateDescription::fromHex(TestFileHelper::readFile(filename).toHex());
			QVERIFY(certDescr);
			QCOMPARE(certDescr->getPurpose(), purpose);
		}


		void testGetDescTestAutentServer()
		{
			QByteArray hexValue
			QSharedPointer<const CertificateDescription> certDescr = CertificateDescription::fromHex(hexValue);
			QVERIFY(certDescr);
			QCOMPARE(certDescr->getPurpose(), QStringLiteral("Demonstration des eID-Service"));
		}


		void testGetDescRlpDirektServer()
		{
			QByteArray hexValue
			QSharedPointer<const CertificateDescription> certDescr = CertificateDescription::fromHex(hexValue);
			QCOMPARE(certDescr->getPurpose(), QStringLiteral("Abwicklung von Verwaltungsleistungen mit Identifikationsbedarf ohne Registrierung im Sinne der GemO Rheinland-Pfalz"));
		}


		void testGetDescAgetoServer()
		{
			QByteArray hexValue
			QSharedPointer<const CertificateDescription> certDescr = CertificateDescription::fromHex(hexValue);
			QVERIFY(certDescr);
			QCOMPARE(certDescr->getPurpose(), QStringLiteral("Identifizierung und Registrierung zum pers\u00F6nlichen Kundenkonto"));
		}


};

QTEST_GUILESS_MAIN(test_TermsOfUsage)
#include "test_TermsOfUsage.moc"
